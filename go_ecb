// CBC Block Cipher Mode
package main

import (
	"fmt"
)

/* an array with 4 rows and 2 columns*/
var codebook = [4][2]int{{0b00, 0b01}, {0b01, 0b10}, {0b10, 0b11}, {0b11, 0b00}}
var codebook2 = [4][2]int{{0b00, 0b10}, {0b01, 0b11}, {0b10, 0b00}, {0b11, 0b01}}
var message = [4]int{0b00, 0b01, 0b10, 0b11}


func codebookLookup(xor int) (lookupValue int) {
	var i, j int = 0, 0
	for i = 0; i < 4; i++ {
		if codebook[i][j] == xor {
			j++
			lookupValue = codebook[i][j]
			break
		}
	}
	return lookupValue
}

func codebookLookup2(xor int) (lookupValue int) {
	var i, j int = 0, 0
	for i = 0; i < 4; i++ {
		if codebook2[i][j] == xor {
			j++
			lookupValue = codebook2[i][j]
			break
		}
	}
	return lookupValue
}

// remove IV
// Adjust loop function to include 2nd codebook

func main() {
	var x int = 0
	var xor int = 0
	var lookupValue int = 0
	for x = 0; x < 4; x++ {

			xor = message[x]
		lookupValue = codebookLookup(xor)

		fmt.Printf("The ciphered value of a is %b\n", lookupValue)
		fmt.Printf("The decrypted message is %b\n", xor)
		}
	for x = 0; x < 4; x++ {

		xor = message[x]
		lookupValue = codebookLookup2(xor)

		fmt.Printf("The ciphered value using codebook2 of a is %b\n", lookupValue)
		fmt.Printf("The decrypted message is %b\n", xor)
	}


	}

